// Generated by view binder compiler. Do not edit!
package com.black.xperiments.headtracking.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.black.xperiments.headtracking.R;
import com.jjoe64.graphview.GraphView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentHeadTrackingBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final GraphView accXPlot;

  @NonNull
  public final GraphView accYPlot;

  @NonNull
  public final GraphView accZPlot;

  @NonNull
  public final RelativeLayout headTrackerView;

  @NonNull
  public final GraphView pitchPlot;

  @NonNull
  public final GraphView rollPlot;

  @NonNull
  public final GraphView yawPlot;

  private FragmentHeadTrackingBinding(@NonNull LinearLayout rootView, @NonNull GraphView accXPlot,
      @NonNull GraphView accYPlot, @NonNull GraphView accZPlot,
      @NonNull RelativeLayout headTrackerView, @NonNull GraphView pitchPlot,
      @NonNull GraphView rollPlot, @NonNull GraphView yawPlot) {
    this.rootView = rootView;
    this.accXPlot = accXPlot;
    this.accYPlot = accYPlot;
    this.accZPlot = accZPlot;
    this.headTrackerView = headTrackerView;
    this.pitchPlot = pitchPlot;
    this.rollPlot = rollPlot;
    this.yawPlot = yawPlot;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentHeadTrackingBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentHeadTrackingBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_head_tracking, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentHeadTrackingBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.accXPlot;
      GraphView accXPlot = ViewBindings.findChildViewById(rootView, id);
      if (accXPlot == null) {
        break missingId;
      }

      id = R.id.accYPlot;
      GraphView accYPlot = ViewBindings.findChildViewById(rootView, id);
      if (accYPlot == null) {
        break missingId;
      }

      id = R.id.accZPlot;
      GraphView accZPlot = ViewBindings.findChildViewById(rootView, id);
      if (accZPlot == null) {
        break missingId;
      }

      id = R.id.headTrackerView;
      RelativeLayout headTrackerView = ViewBindings.findChildViewById(rootView, id);
      if (headTrackerView == null) {
        break missingId;
      }

      id = R.id.pitchPlot;
      GraphView pitchPlot = ViewBindings.findChildViewById(rootView, id);
      if (pitchPlot == null) {
        break missingId;
      }

      id = R.id.rollPlot;
      GraphView rollPlot = ViewBindings.findChildViewById(rootView, id);
      if (rollPlot == null) {
        break missingId;
      }

      id = R.id.yawPlot;
      GraphView yawPlot = ViewBindings.findChildViewById(rootView, id);
      if (yawPlot == null) {
        break missingId;
      }

      return new FragmentHeadTrackingBinding((LinearLayout) rootView, accXPlot, accYPlot, accZPlot,
          headTrackerView, pitchPlot, rollPlot, yawPlot);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
